// ---------------- CONSTANT VALUES ---------------- //

static const int LightClusterGridWidth = 16;
static const int LightClusterGridHeight = 8;
static const int LightClusterGridDepth = 24;
static const float LightClusterExpScale = 0.015625;
static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeNone = 0;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxMips = 6;
static const uint LightProbeMaxMip = 6;
static const uint LightProbeMaxSpecularMip = 5;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupDynamic = 4;
static const uint InstanceGroupCharacter = 8;
static const uint InstanceGroupWeapon = 16;
static const int APGridWidth = 32;
static const int APGridHeight = 24;
static const int APGridDepth = 32;
static const float APGridExpScale = 0.0015;
static const int FogGridWidth = 128;
static const int FogGridHeight = 64;
static const int FogGridDepth = 192;
static const float FogGridExpScale = 0.0005;

// ---------------- DATA STRUCTURES ---------------- //

// ---------------- SHADER RESOURCES ---------------- //

// ---------------- CONSTANT VALUES ---------------- //

static const uint BokehShapeSize = 19;
static const uint BlockSize = 8;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 416
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4x4   ReprojectionMatrix;            // offset:  256
	float4     CameraForward;                 // offset:  320
	float4     CameraRight;                   // offset:  336
	float4     CameraUp;                      // offset:  352
	float4     CameraPosition;                // offset:  368
	float      LinearizeDepthScale;           // offset:  384
	float      LinearizeDepthBias;            // offset:  388
	float      FarDistance;                   // offset:  392
	float      Pad0;                          // offset:  396
	float      CameraTangentX;                // offset:  400
	float      CameraTangentY;                // offset:  404
	float      Pad1;                          // offset:  408
	float      Pad2;                          // offset:  412
};

// Fusion.Engine.Graphics.DofFilter+DOF_DATA
// Marshal.SizeOf = 64
struct DOF_DATA {
	float      ApertureDiameter;              // offset:    0
	float      FocalLength;                   // offset:    4
	float      FocalDistance;                 // offset:    8
	float      PixelDensity;                  // offset:   12
};

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	DOF_DATA Dof : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	float4 BokehShape[19] : packoffset(c0);
};
SamplerState                   LinearClamp                    : register(s0);
#if defined(COMPUTE_COC)
Texture2D<float>               DepthBuffer                    : register(t0);
RWTexture2D<float4>            CocTarget                      : register(u0);
#endif
#if defined(EXTRACT) || defined(BOKEH) || defined(COMPOSE)
Texture2D<float4>              CocTexture                     : register(t0);
#endif
#if defined(EXTRACT) || defined(COMPOSE)
Texture2D<float4>              HdrSource                      : register(t1);
#endif
#if defined(EXTRACT)
RWTexture2D<float4>            Background                     : register(u0);
RWTexture2D<float4>            Foreground                     : register(u1);
#endif
#if defined(BOKEH)
Texture2D<float4>              BokehSource                    : register(t2);
RWTexture2D<float4>            BokehTarget                    : register(u0);
#endif
#if defined(COMPOSE)
Texture2D<float4>              BokehBackground                : register(t2);
Texture2D<float4>              BokehForeground                : register(t3);
RWTexture2D<float4>            HdrTarget                      : register(u0);
#endif
