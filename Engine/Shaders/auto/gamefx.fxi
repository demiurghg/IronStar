#ifndef UBERSHADER_RENDERSYSTEM
#define UBERSHADER_RENDERSYSTEM

// ---------------- CONSTANT VALUES ---------------- //

static const int MaxBones = 128;
static const int LightClusterGridWidth = 16;
static const int LightClusterGridHeight = 8;
static const int LightClusterGridDepth = 24;
static const float LightClusterExpScale = 0.015625;
static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeNone = 0;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxMips = 7;
static const uint LightProbeMaxMip = 6;
static const uint LightProbeMaxSpecularMip = 5;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupLightmap = 4;
static const uint InstanceGroupLightmapProxy = 8;
static const uint InstanceGroupWeapon = 16;

// ---------------- DATA STRUCTURES ---------------- //

// ---------------- SHADER RESOURCES ---------------- //

#endif

// ---------------- CONSTANT VALUES ---------------- //

static const int NoiseSizeX = 64;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.GameFX+PARAMS
// Marshal.SizeOf = 128
#ifndef __STRUCT_PARAMS
#define __STRUCT_PARAMS 1
struct PARAMS {
	float      Time;                          // offset:    0
	float      Random;                        // offset:    4
	float      PainAmount;                    // offset:    8
	float      DeathFactor;                   // offset:   12
};
#endif

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	PARAMS Params : packoffset(c0);
};
Texture2D<float4>              Source                         : register(t0);
Texture2D<float4>              CloudTex                       : register(t1);
Texture2D<float4>              PainTex                        : register(t2);
SamplerState                   LinearClamp                    : register(s0);
SamplerState                   LinearWrap                     : register(s1);
