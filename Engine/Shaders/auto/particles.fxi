#ifndef UBERSHADER_RENDERSYSTEM
#define UBERSHADER_RENDERSYSTEM

// ---------------- CONSTANT VALUES ---------------- //

static const int LightClusterGridWidth = 16;
static const int LightClusterGridHeight = 8;
static const int LightClusterGridDepth = 24;
static const float LightClusterExpScale = 0.015625;
static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeNone = 0;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxMips = 7;
static const uint LightProbeMaxMip = 6;
static const uint LightProbeMaxSpecularMip = 5;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupDynamic = 4;
static const uint InstanceGroupCharacter = 8;
static const uint InstanceGroupWeapon = 16;

// ---------------- DATA STRUCTURES ---------------- //

// ---------------- SHADER RESOURCES ---------------- //

#endif

// ---------------- CONSTANT VALUES ---------------- //

static const int BLOCK_SIZE = 64;
static const int MAX_INJECTED = 4096;
static const int MAX_PARTICLES = 65536;
static const int MAX_IMAGES = 512;
static const uint ParticleFX_Hard = 0;
static const uint ParticleFX_HardLit = 1;
static const uint ParticleFX_HardLitShadow = 2;
static const uint ParticleFX_Soft = 3;
static const uint ParticleFX_SoftLit = 4;
static const uint ParticleFX_SoftLitShadow = 5;
static const uint ParticleFX_Distortive = 6;
static const uint LightmapRegionSize = 1024;
static const uint LightmapWidth = 4096;
static const uint LightmapHeight = 2048;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.ParticleStream+PARAMS
// Marshal.SizeOf = 128
#ifndef __STRUCT_PARAMS
#define __STRUCT_PARAMS 1
struct PARAMS {
	float4x4   WorldToLightVolume;            // offset:    0
	float4     Gravity;                       // offset:   64
	float4     LightMapSize;                  // offset:   80
	int        MaxParticles;                  // offset:   96
	float      DeltaTime;                     // offset:  100
	uint       DeadListSize;                  // offset:  104
	uint       IntegrationSteps;              // offset:  108
	float      IndirectLightFactor;           // offset:  112
	float      DirectLightFactor;             // offset:  116
};
#endif

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 416
#ifndef __STRUCT_CAMERA
#define __STRUCT_CAMERA 1
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4x4   ReprojectionMatrix;            // offset:  256
	float4     CameraForward;                 // offset:  320
	float4     CameraRight;                   // offset:  336
	float4     CameraUp;                      // offset:  352
	float4     CameraPosition;                // offset:  368
	float      LinearizeDepthScale;           // offset:  384
	float      LinearizeDepthBias;            // offset:  388
	float      FarDistance;                   // offset:  392
	float      Pad0;                          // offset:  396
	float      CameraTangentX;                // offset:  400
	float      CameraTangentY;                // offset:  404
	float      Pad1;                          // offset:  408
	float      Pad2;                          // offset:  412
};
#endif

// Fusion.Engine.Graphics.GpuData+DIRECT_LIGHT
// Marshal.SizeOf = 48
#ifndef __STRUCT_DIRECT_LIGHT
#define __STRUCT_DIRECT_LIGHT 1
struct DIRECT_LIGHT {
	float4     DirectLightDirection;          // offset:    0
	float4     DirectLightIntensity;          // offset:   16
	float      DirectLightAngularSize;        // offset:   32
	float      Pad0;                          // offset:   36
	float      Pad1;                          // offset:   40
	float      Pad2;                          // offset:   44
};
#endif

// Fusion.Engine.Graphics.ShadowMap+CASCADE_SHADOW
// Marshal.SizeOf = 576
#ifndef __STRUCT_CASCADE_SHADOW
#define __STRUCT_CASCADE_SHADOW 1
struct CASCADE_SHADOW {
	float4x4   CascadeViewProjection0;        // offset:    0
	float4x4   CascadeViewProjection1;        // offset:   64
	float4x4   CascadeViewProjection2;        // offset:  128
	float4x4   CascadeViewProjection3;        // offset:  192
	float4x4   CascadeGradientMatrix0;        // offset:  256
	float4x4   CascadeGradientMatrix1;        // offset:  320
	float4x4   CascadeGradientMatrix2;        // offset:  384
	float4x4   CascadeGradientMatrix3;        // offset:  448
	float4     CascadeScaleOffset0;           // offset:  512
	float4     CascadeScaleOffset1;           // offset:  528
	float4     CascadeScaleOffset2;           // offset:  544
	float4     CascadeScaleOffset3;           // offset:  560
};
#endif

// Fusion.Engine.Graphics.Fog+FOG_DATA
// Marshal.SizeOf = 256
#ifndef __STRUCT_FOG_DATA
#define __STRUCT_FOG_DATA 1
struct FOG_DATA {
	float4x4   WorldToVolume;                 // offset:    0
	float4     SampleOffset;                  // offset:   64
	float4     FogSizeInv;                    // offset:   80
	uint       FogSizeX;                      // offset:   96
	uint       FogSizeY;                      // offset:  100
	uint       FogSizeZ;                      // offset:  104
	float      FogGridExpK;                   // offset:  108
	float      DirectLightFactor;             // offset:  112
	float      IndirectLightFactor;           // offset:  116
	float      HistoryFactor;                 // offset:  120
	uint       FrameCount;                    // offset:  124
	float      FogDensity;                    // offset:  128
	float      FogHeight;                     // offset:  132
	float      FogScale;                      // offset:  136
};
#endif

// Fusion.Engine.Graphics.Particle
// Marshal.SizeOf = 124
#ifndef __STRUCT_Particle
#define __STRUCT_Particle 1
struct Particle {
	float3     Position;                      // offset:    0
	float3     Velocity;                      // offset:   12
	float3     Acceleration;                  // offset:   24
	float3     Color;                         // offset:   36
	float      Alpha;                         // offset:   48
	float      Exposure;                      // offset:   52
	float      Roughness;                     // offset:   56
	float      Metallic;                      // offset:   60
	float      Intensity;                     // offset:   64
	float      Scattering;                    // offset:   68
	float      BeamFactor;                    // offset:   72
	float      Gravity;                       // offset:   76
	float      Damping;                       // offset:   80
	float      Size0;                         // offset:   84
	float      Size1;                         // offset:   88
	float      Rotation0;                     // offset:   92
	float      Rotation1;                     // offset:   96
	float      LifeTime;                      // offset:  100
	float      TimeLag;                       // offset:  104
	float      FadeIn;                        // offset:  108
	float      FadeOut;                       // offset:  112
	uint       WpnImageIndexCount;            // offset:  116
	uint       Effects;                       // offset:  120
};
#endif

// Fusion.Engine.Graphics.SceneRenderer+LIGHT
// Marshal.SizeOf = 132
#ifndef __STRUCT_LIGHT
#define __STRUCT_LIGHT 1
struct LIGHT {
	float4x4   ViewProjection;                // offset:    0
	float4     Position0LightRange;           // offset:   64
	float4     Position1TubeRadius;           // offset:   80
	float4     IntensityFar;                  // offset:   96
	float4     ShadowScaleOffset;             // offset:  112
	uint       LightType;                     // offset:  128
};
#endif

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	PARAMS Params : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	CAMERA CameraWeapon : packoffset(c0);
};
cbuffer __buffer3 : register(b3) {
	float4 Images[512] : packoffset(c0);
};
cbuffer __buffer4 : register(b4) {
	DIRECT_LIGHT DirectLight : packoffset(c0);
};
cbuffer __buffer5 : register(b5) {
	CASCADE_SHADOW CascadeShadow : packoffset(c0);
};
cbuffer __buffer6 : register(b6) {
	FOG_DATA Fog : packoffset(c0);
};
SamplerState                   LinearSampler                  : register(s0);
SamplerState                   FogSampler                     : register(s1);
SamplerComparisonState         ShadowSampler                  : register(s2);
Texture2D<float4>              Texture                        : register(t0);
StructuredBuffer<Particle>     injectionBuffer                : register(t1);
Texture2D<float4>              DepthValues                    : register(t5);
Texture2D<float4>              ColorTemperature               : register(t6);
Texture3D<uint2>               ClusterArray                   : register(t7);
Buffer<uint>                   ClusterIndexBuffer             : register(t8);
StructuredBuffer<LIGHT>        ClusterLightBuffer             : register(t9);
Texture2D<float4>              ShadowMap                      : register(t10);
Texture2D<float4>              LightMap                       : register(t11);
Texture2D<float4>              ShadowMask                     : register(t12);
Texture3D<float4>              FogVolume                      : register(t13);
Texture3D<float4>              IrradianceVolumeL0             : register(t14);
Texture3D<float4>              IrradianceVolumeL1             : register(t15);
Texture3D<float4>              IrradianceVolumeL2             : register(t16);
Texture3D<float4>              IrradianceVolumeL3             : register(t17);
StructuredBuffer<float4>       lightMapRegionsGS              : register(t18);
StructuredBuffer<float4>       ExposureBuffer                 : register(t19);
#if defined(DRAW)
StructuredBuffer<Particle>     particleBuffer                 : register(t2);
StructuredBuffer<float2>       sortParticleBuffer             : register(t3);
#endif
#if defined(COMPUTE)
RWStructuredBuffer<Particle>   particleBuffer                 : register(u0);
ConsumeStructuredBuffer<uint>  deadParticleIndicesPull        : register(u1);
AppendStructuredBuffer<uint>   deadParticleIndicesPush        : register(u1);
RWStructuredBuffer<float2>     sortParticleBuffer             : register(u2);
RWStructuredBuffer<float4>     lightMapRegions                : register(u3);
#endif
