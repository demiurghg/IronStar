// ---------------- CONSTANT VALUES ---------------- //

static const int TileSize = 8;
static const int ClusterSize = 4;
static const uint PatchCacheSize = 768;
static const uint LightTypeOmni = 1;
static const uint LightTypeSpotShadow = 3;
static const uint LightSpotShapeRound = 131072;
static const uint LightSpotShapeSquare = 65536;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 352
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4     CameraForward;                 // offset:  256
	float4     CameraRight;                   // offset:  272
	float4     CameraUp;                      // offset:  288
	float4     CameraPosition;                // offset:  304
	float      LinearizeDepthScale;           // offset:  320
	float      LinearizeDepthBias;            // offset:  324
	float      FarDistance;                   // offset:  328
	float      Pad0;                          // offset:  332
	float      CameraTangentX;                // offset:  336
	float      CameraTangentY;                // offset:  340
	float      Pad1;                          // offset:  344
	float      Pad2;                          // offset:  348
};

// Fusion.Engine.Graphics.GI.Radiosity+RADIOSITY
// Marshal.SizeOf = 64
struct RADIOSITY {
	uint2      RegionXY;                      // offset:    0
	uint       RegionWidth;                   // offset:    8
	uint       RegionHeight;                  // offset:   12
	float      SkyFactor;                     // offset:   16
	float      IndirectFactor;                // offset:   20
	float      SecondBounce;                  // offset:   24
	float      ShadowFilter;                  // offset:   28
};

// Fusion.Engine.Graphics.ShadowMap+CASCADE_SHADOW
// Marshal.SizeOf = 576
struct CASCADE_SHADOW {
	float4x4   CascadeViewProjection0;        // offset:    0
	float4x4   CascadeViewProjection1;        // offset:   64
	float4x4   CascadeViewProjection2;        // offset:  128
	float4x4   CascadeViewProjection3;        // offset:  192
	float4x4   CascadeGradientMatrix0;        // offset:  256
	float4x4   CascadeGradientMatrix1;        // offset:  320
	float4x4   CascadeGradientMatrix2;        // offset:  384
	float4x4   CascadeGradientMatrix3;        // offset:  448
	float4     CascadeScaleOffset0;           // offset:  512
	float4     CascadeScaleOffset1;           // offset:  528
	float4     CascadeScaleOffset2;           // offset:  544
	float4     CascadeScaleOffset3;           // offset:  560
};

// Fusion.Engine.Graphics.GpuData+DIRECT_LIGHT
// Marshal.SizeOf = 48
struct DIRECT_LIGHT {
	float4     DirectLightDirection;          // offset:    0
	float4     DirectLightIntensity;          // offset:   16
	float      DirectLightAngularSize;        // offset:   32
	float      Pad0;                          // offset:   36
	float      Pad1;                          // offset:   40
	float      Pad2;                          // offset:   44
};

// Fusion.Engine.Graphics.SceneRenderer+LIGHT
// Marshal.SizeOf = 120
struct LIGHT {
	float4x4   ViewProjection;                // offset:    0
	float4     PositionRadius;                // offset:   64
	float4     IntensityFar;                  // offset:   80
	float4     ShadowScaleOffset;             // offset:   96
	uint       LightType;                     // offset:  112
	float      SourceRadius;                  // offset:  116
};

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	RADIOSITY Radiosity : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	CASCADE_SHADOW CascadeShadow : packoffset(c0);
};
cbuffer __buffer3 : register(b3) {
	DIRECT_LIGHT DirectLight : packoffset(c0);
};
cbuffer __buffer4 : register(b4) {
	float4 FrustumPlanes[6] : packoffset(c0);
};
Texture2D<float4>              Position                       : register(t0);
Texture2D<float4>              Albedo                         : register(t1);
Texture2D<float4>              Normal                         : register(t2);
Texture2D<uint4>               Tiles                          : register(t3);
Texture2D<uint>                IndexMap                       : register(t4);
Buffer<uint>                   Indices                        : register(t5);
Buffer<uint>                   Cache                          : register(t6);
Texture2D<float4>              Radiance                       : register(t7);
Texture2D<float4>              ShadowMap                      : register(t8);
Texture2D<float4>              ShadowMask                     : register(t9);
StructuredBuffer<LIGHT>        Lights                         : register(t10);
Texture2D<float4>              Sky                            : register(t11);
TextureCube<float4>            SkyBox                         : register(t12);
Texture2D<float4>              BBoxMin                        : register(t13);
Texture2D<float4>              BBoxMax                        : register(t14);
Texture3D<uint4>               Clusters                       : register(t15);
Texture3D<uint>                IndexVolume                    : register(t16);
Texture3D<float4>              SkyVolume                      : register(t17);
SamplerState                   LinearSampler                  : register(s0);
SamplerComparisonState         ShadowSampler                  : register(s1);
#if defined(LIGHTING) || defined(COLLAPSE) || defined(DILATE)
RWTexture2D<float4>            RadianceUav                    : register(u0);
#endif
#if defined(INTEGRATE2)
RWTexture2D<float4>            IrradianceL0                   : register(u0);
RWTexture2D<float4>            IrradianceL1                   : register(u1);
RWTexture2D<float4>            IrradianceL2                   : register(u2);
RWTexture2D<float4>            IrradianceL3                   : register(u3);
#endif
#if defined(INTEGRATE3)
RWTexture3D<float4>            LightVolumeL0                  : register(u0);
RWTexture3D<float4>            LightVolumeL1                  : register(u1);
RWTexture3D<float4>            LightVolumeL2                  : register(u2);
RWTexture3D<float4>            LightVolumeL3                  : register(u3);
#endif
