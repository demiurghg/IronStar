#ifndef UBERSHADER_RENDERSYSTEM
#define UBERSHADER_RENDERSYSTEM

// ---------------- CONSTANT VALUES ---------------- //

static const int MaxBones = 128;
static const int LightClusterGridWidth = 16;
static const int LightClusterGridHeight = 8;
static const int LightClusterGridDepth = 24;
static const float LightClusterExpScale = 0.015625;
static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeNone = 0;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxMips = 7;
static const uint LightProbeMaxMip = 6;
static const uint LightProbeMaxSpecularMip = 5;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupDynamic = 4;
static const uint InstanceGroupCharacter = 8;
static const uint InstanceGroupWeapon = 16;

// ---------------- DATA STRUCTURES ---------------- //

// ---------------- SHADER RESOURCES ---------------- //

#endif

// ---------------- CONSTANT VALUES ---------------- //

static const int TileSize = 16;
static const int ClusterSize = 4;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 416
#ifndef __STRUCT_CAMERA
#define __STRUCT_CAMERA 1
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4x4   ReprojectionMatrix;            // offset:  256
	float4     CameraForward;                 // offset:  320
	float4     CameraRight;                   // offset:  336
	float4     CameraUp;                      // offset:  352
	float4     CameraPosition;                // offset:  368
	float      LinearizeDepthScale;           // offset:  384
	float      LinearizeDepthBias;            // offset:  388
	float      FarDistance;                   // offset:  392
	float      Pad0;                          // offset:  396
	float      CameraTangentX;                // offset:  400
	float      CameraTangentY;                // offset:  404
	float      Pad1;                          // offset:  408
	float      Pad2;                          // offset:  412
};
#endif

// Fusion.Engine.Graphics.GI.Radiosity+RADIOSITY
// Marshal.SizeOf = 128
#ifndef __STRUCT_RADIOSITY
#define __STRUCT_RADIOSITY 1
struct RADIOSITY {
	float4x4   VoxelToWorld;                  // offset:    0
	uint2      RegionXY;                      // offset:   64
	uint       RegionWidth;                   // offset:   72
	uint       RegionHeight;                  // offset:   76
	float      SkyFactor;                     // offset:   80
	float      IndirectFactor;                // offset:   84
	float      SecondBounce;                  // offset:   88
	float      ShadowFilter;                  // offset:   92
	float      ColorBounce;                   // offset:   96
	uint       NumRays;                       // offset:  100
	float      WhiteAlbedo;                   // offset:  104
};
#endif

// Fusion.Engine.Graphics.ShadowSystem+CASCADE_SHADOW
// Marshal.SizeOf = 576
#ifndef __STRUCT_CASCADE_SHADOW
#define __STRUCT_CASCADE_SHADOW 1
struct CASCADE_SHADOW {
	float4x4   CascadeViewProjection0;        // offset:    0
	float4x4   CascadeViewProjection1;        // offset:   64
	float4x4   CascadeViewProjection2;        // offset:  128
	float4x4   CascadeViewProjection3;        // offset:  192
	float4x4   CascadeGradientMatrix0;        // offset:  256
	float4x4   CascadeGradientMatrix1;        // offset:  320
	float4x4   CascadeGradientMatrix2;        // offset:  384
	float4x4   CascadeGradientMatrix3;        // offset:  448
	float4     CascadeScaleOffset0;           // offset:  512
	float4     CascadeScaleOffset1;           // offset:  528
	float4     CascadeScaleOffset2;           // offset:  544
	float4     CascadeScaleOffset3;           // offset:  560
};
#endif

// Fusion.Engine.Graphics.GpuData+DIRECT_LIGHT
// Marshal.SizeOf = 48
#ifndef __STRUCT_DIRECT_LIGHT
#define __STRUCT_DIRECT_LIGHT 1
struct DIRECT_LIGHT {
	float4     DirectLightDirection;          // offset:    0
	float4     DirectLightIntensity;          // offset:   16
	float      DirectLightAngularSize;        // offset:   32
	float      Pad0;                          // offset:   36
	float      Pad1;                          // offset:   40
	float      Pad2;                          // offset:   44
};
#endif

// Fusion.Engine.Graphics.SceneRenderer+LIGHT
// Marshal.SizeOf = 132
#ifndef __STRUCT_LIGHT
#define __STRUCT_LIGHT 1
struct LIGHT {
	float4x4   ViewProjection;                // offset:    0
	float4     Position0LightRange;           // offset:   64
	float4     Position1TubeRadius;           // offset:   80
	float4     IntensityFar;                  // offset:   96
	float4     ShadowScaleOffset;             // offset:  112
	uint       LightType;                     // offset:  128
};
#endif

// Fusion.Engine.Graphics.GI.RayTracer+TRIANGLE
// Marshal.SizeOf = 64
#ifndef __STRUCT_TRIANGLE
#define __STRUCT_TRIANGLE 1
struct TRIANGLE {
	float4     Point0;                        // offset:    0
	float4     Point1;                        // offset:   16
	float4     Point2;                        // offset:   32
	float4     PlaneEq;                       // offset:   48
};
#endif

// Fusion.Engine.Graphics.GI.RayTracer+BVHNODE
// Marshal.SizeOf = 32
#ifndef __STRUCT_BVHNODE
#define __STRUCT_BVHNODE 1
struct BVHNODE {
	float3     BBoxMin;                       // offset:    0
	uint       Index;                         // offset:   12
	float3     BBoxMax;                       // offset:   16
	uint       Reserved;                      // offset:   28
};
#endif

// Fusion.Engine.Graphics.GI.Radiosity+LMVertex
// Marshal.SizeOf = 8
#ifndef __STRUCT_LMVertex
#define __STRUCT_LMVertex 1
struct LMVertex {
	float2     LMCoord;                       // offset:    0
};
#endif

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	RADIOSITY Radiosity : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	CASCADE_SHADOW CascadeShadow : packoffset(c0);
};
cbuffer __buffer3 : register(b3) {
	DIRECT_LIGHT DirectLight : packoffset(c0);
};
cbuffer __buffer4 : register(b4) {
	float4 FrustumPlanes[6] : packoffset(c0);
};
Texture2D<float4>              Position                       : register(t0);
Texture2D<float4>              Albedo                         : register(t1);
Texture2D<float4>              Normal                         : register(t2);
Texture2D<float4>              BBoxMin                        : register(t3);
Texture2D<float4>              BBoxMax                        : register(t4);
Texture2D<float4>              Radiance                       : register(t7);
Texture2D<float4>              ShadowMap                      : register(t8);
Texture2D<float4>              ShadowMask                     : register(t9);
StructuredBuffer<LIGHT>        Lights                         : register(t10);
TextureCube<float4>            SkyBox                         : register(t12);
StructuredBuffer<TRIANGLE>     RtTriangles                    : register(t18);
StructuredBuffer<BVHNODE>      RtBvhTree                      : register(t19);
StructuredBuffer<LMVertex>     RtLmVerts                      : register(t20);
SamplerState                   LinearSampler                  : register(s0);
SamplerComparisonState         ShadowSampler                  : register(s1);
#if defined(ILLUMINATE) || defined(COLLAPSE) || defined(DILATE)
RWTexture2D<float4>            RadianceUav                    : register(u0);
#endif
#if defined(INTEGRATE2)
RWTexture2D<float4>            IrradianceL0                   : register(u0);
RWTexture2D<float4>            IrradianceL1                   : register(u1);
RWTexture2D<float4>            IrradianceL2                   : register(u2);
RWTexture2D<float4>            IrradianceL3                   : register(u3);
#endif
#if defined(INTEGRATE3)
RWTexture3D<float4>            LightVolumeL0                  : register(u0);
RWTexture3D<float4>            LightVolumeL1                  : register(u1);
RWTexture3D<float4>            LightVolumeL2                  : register(u2);
RWTexture3D<float4>            LightVolumeL3                  : register(u3);
#endif
