// ---------------- CONSTANT VALUES ---------------- //

static const int LightClusterGridWidth = 16;
static const int LightClusterGridHeight = 8;
static const int LightClusterGridDepth = 24;
static const float LightClusterExpScale = 0.015625;
static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeNone = 0;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxMips = 7;
static const uint LightProbeMaxMip = 6;
static const uint LightProbeMaxSpecularMip = 5;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupDynamic = 4;
static const uint InstanceGroupCharacter = 8;
static const uint InstanceGroupWeapon = 16;

// ---------------- DATA STRUCTURES ---------------- //

// ---------------- SHADER RESOURCES ---------------- //

// ---------------- CONSTANT VALUES ---------------- //

static const uint BLOCK_SIZE = 16;
static const uint LUT_WIDTH = 128;
static const uint LUT_HEIGHT = 128;
static const uint AP_WIDTH = 32;
static const uint AP_HEIGHT = 32;
static const uint AP_DEPTH = 16;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.Sky2+SKY_DATA
// Marshal.SizeOf = 256
struct SKY_DATA {
	float4     BetaRayleigh;                  // offset:    0
	float4     BetaMie;                       // offset:   16
	float4     SunIntensity;                  // offset:   32
	float4     SunBrightness;                 // offset:   48
	float4     SunDirection;                  // offset:   64
	float4     ViewOrigin;                    // offset:   80
	float4     AmbientLevel;                  // offset:   96
	float4     ViewportSize;                  // offset:  112
	float      SunAzimuth;                    // offset:  128
	float      SunAltitude;                   // offset:  132
	float      APScale;                       // offset:  136
	float      Dummy1;                        // offset:  140
	float      PlanetRadius;                  // offset:  144
	float      AtmosphereRadius;              // offset:  148
	float      RayleighHeight;                // offset:  152
	float      MieHeight;                     // offset:  156
	float      MieExcentricity;               // offset:  160
	float      SkySphereSize;                 // offset:  164
	float      ViewHeight;                    // offset:  168
	float      SkyExposure;                   // offset:  172
	float      CirrusHeight;                  // offset:  176
	float      CirrusCoverage;                // offset:  180
	float      CirrusDensity;                 // offset:  184
	float      CirrusScale;                   // offset:  188
	float      CirrusScrollU;                 // offset:  192
	float      CirrusScrollV;                 // offset:  196
	float      Dummy2;                        // offset:  200
	float      Dummy3;                        // offset:  204
};

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 416
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4x4   ReprojectionMatrix;            // offset:  256
	float4     CameraForward;                 // offset:  320
	float4     CameraRight;                   // offset:  336
	float4     CameraUp;                      // offset:  352
	float4     CameraPosition;                // offset:  368
	float      LinearizeDepthScale;           // offset:  384
	float      LinearizeDepthBias;            // offset:  388
	float      FarDistance;                   // offset:  392
	float      Pad0;                          // offset:  396
	float      CameraTangentX;                // offset:  400
	float      CameraTangentY;                // offset:  404
	float      Pad1;                          // offset:  408
	float      Pad2;                          // offset:  412
};

// Fusion.Engine.Graphics.GpuData+DIRECT_LIGHT
// Marshal.SizeOf = 48
struct DIRECT_LIGHT {
	float4     DirectLightDirection;          // offset:    0
	float4     DirectLightIntensity;          // offset:   16
	float      DirectLightAngularSize;        // offset:   32
	float      Pad0;                          // offset:   36
	float      Pad1;                          // offset:   40
	float      Pad2;                          // offset:   44
};

// Fusion.Engine.Graphics.Fog+FOG_DATA
// Marshal.SizeOf = 256
struct FOG_DATA {
	float4     WorldToVoxelScale;             // offset:    0
	float4     WorldToVoxelOffset;            // offset:   16
	float4     SampleOffset;                  // offset:   32
	float4     FogSizeInv;                    // offset:   48
	uint       FogSizeX;                      // offset:   64
	uint       FogSizeY;                      // offset:   68
	uint       FogSizeZ;                      // offset:   72
	float      FogGridExpK;                   // offset:   76
	float      DirectLightFactor;             // offset:   80
	float      IndirectLightFactor;           // offset:   84
	float      HistoryFactor;                 // offset:   88
	uint       FrameCount;                    // offset:   92
	float      FogDensity;                    // offset:   96
	float      FogHeight;                     // offset:  100
	float      FogScale;                      // offset:  104
};

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	SKY_DATA Sky : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	DIRECT_LIGHT DirectLight : packoffset(c0);
};
cbuffer __buffer3 : register(b3) {
	FOG_DATA Fog : packoffset(c0);
};
Texture2D<float4>              LutScattering                  : register(t0);
Texture2D<float4>              LutTransmittance               : register(t1);
Texture2D<float4>              LutCirrus                      : register(t2);
TextureCube<float4>            SkyCube                        : register(t3);
Texture2D<float4>              FogLut                         : register(t4);
Texture2D<float4>              CirrusClouds                   : register(t5);
SamplerState                   LutSampler                     : register(s0);
SamplerState                   LinearWrap                     : register(s1);
SamplerState                   LinearClamp                    : register(s2);
#if defined(LUT_AP)
RWTexture3D<float4>            LutAP0                         : register(u0);
RWTexture3D<float4>            LutAP1                         : register(u1);
#endif
