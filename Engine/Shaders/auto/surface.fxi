// ---------------- CONSTANT VALUES ---------------- //

static const int VTVirtualPageCount = 1024;
static const int VTPageSize = 128;
static const int VTMaxMip = 6;
static const int VTMipSelectorScale = 2048;
static const uint LightTypeOmni = 1;
static const uint LightTypeOmniShadow = 2;
static const uint LightTypeSpotShadow = 3;
static const uint LightTypeAmbient = 4;
static const uint LightSpotShapeSquare = 65536;
static const uint LightSpotShapeRound = 131072;
static const uint LightProbeSize = 128;
static const uint LightProbeMaxSpecularMip = 5;
static const uint LightProbeDiffuseMip = 6;
static const uint InstanceGroupStatic = 1;
static const uint InstanceGroupDynamic = 4;
static const uint InstanceGroupCharacter = 8;
static const uint InstanceGroupWeapon = 16;

// ---------------- DATA STRUCTURES ---------------- //

// Fusion.Engine.Graphics.GpuData+CAMERA
// Marshal.SizeOf = 352
struct CAMERA {
	float4x4   Projection;                    // offset:    0
	float4x4   View;                          // offset:   64
	float4x4   ViewProjection;                // offset:  128
	float4x4   ViewInverted;                  // offset:  192
	float4     CameraForward;                 // offset:  256
	float4     CameraRight;                   // offset:  272
	float4     CameraUp;                      // offset:  288
	float4     CameraPosition;                // offset:  304
	float      LinearizeDepthScale;           // offset:  320
	float      LinearizeDepthBias;            // offset:  324
	float      FarDistance;                   // offset:  328
	float      Pad0;                          // offset:  332
	float      CameraTangentX;                // offset:  336
	float      CameraTangentY;                // offset:  340
	float      Pad1;                          // offset:  344
	float      Pad2;                          // offset:  348
};

// Fusion.Engine.Graphics.GpuData+DIRECT_LIGHT
// Marshal.SizeOf = 48
struct DIRECT_LIGHT {
	float4     DirectLightDirection;          // offset:    0
	float4     DirectLightIntensity;          // offset:   16
	float      DirectLightAngularSize;        // offset:   32
	float      Pad0;                          // offset:   36
	float      Pad1;                          // offset:   40
	float      Pad2;                          // offset:   44
};

// Fusion.Engine.Graphics.SceneRenderer+STAGE
// Marshal.SizeOf = 256
struct STAGE {
	float4x4   OcclusionGridMatrix;           // offset:    0
	float4     SkyAmbientLevel;               // offset:   64
	float4     FogColor;                      // offset:   80
	float4     ViewportSize;                  // offset:   96
	float      FogAttenuation;                // offset:  112
	float      VTPageScaleRCP;                // offset:  116
	float      VTGradientScaler;              // offset:  120
	float      SsaoWeight;                    // offset:  124
	float      SlopeBias;                     // offset:  128
	float      DepthBias;                     // offset:  132
};

// Fusion.Engine.Graphics.SceneRenderer+INSTANCE
// Marshal.SizeOf = 128
struct INSTANCE {
	float4x4   World;                         // offset:    0
	float4     Color;                         // offset:   64
	float4     LMRegion;                      // offset:   80
	int        Group;                         // offset:   96
};

// Fusion.Engine.Graphics.SceneRenderer+SUBSET
// Marshal.SizeOf = 48
struct SUBSET {
	float4     Rectangle;                     // offset:    0
	float4     Color;                         // offset:   16
	float      MaxMip;                        // offset:   32
	float      Dummy1;                        // offset:   36
	float      Dummy2;                        // offset:   40
	float      Dummy3;                        // offset:   44
};

// Fusion.Engine.Graphics.ShadowMap+CASCADE_SHADOW
// Marshal.SizeOf = 576
struct CASCADE_SHADOW {
	float4x4   CascadeViewProjection0;        // offset:    0
	float4x4   CascadeViewProjection1;        // offset:   64
	float4x4   CascadeViewProjection2;        // offset:  128
	float4x4   CascadeViewProjection3;        // offset:  192
	float4x4   CascadeGradientMatrix0;        // offset:  256
	float4x4   CascadeGradientMatrix1;        // offset:  320
	float4x4   CascadeGradientMatrix2;        // offset:  384
	float4x4   CascadeGradientMatrix3;        // offset:  448
	float4     CascadeScaleOffset0;           // offset:  512
	float4     CascadeScaleOffset1;           // offset:  528
	float4     CascadeScaleOffset2;           // offset:  544
	float4     CascadeScaleOffset3;           // offset:  560
};

// Fusion.Engine.Graphics.SceneRenderer+LIGHT
// Marshal.SizeOf = 120
struct LIGHT {
	float4x4   ViewProjection;                // offset:    0
	float4     PositionRadius;                // offset:   64
	float4     IntensityFar;                  // offset:   80
	float4     ShadowScaleOffset;             // offset:   96
	uint       LightType;                     // offset:  112
	float      SourceRadius;                  // offset:  116
};

// Fusion.Engine.Graphics.SceneRenderer+DECAL
// Marshal.SizeOf = 184
struct DECAL {
	float4x4   DecalMatrixInv;                // offset:    0
	float4     BasisX;                        // offset:   64
	float4     BasisY;                        // offset:   80
	float4     BasisZ;                        // offset:   96
	float4     EmissionRoughness;             // offset:  112
	float4     ImageScaleOffset;              // offset:  128
	float4     BaseColorMetallic;             // offset:  144
	float      ColorFactor;                   // offset:  160
	float      SpecularFactor;                // offset:  164
	float      NormalMapFactor;               // offset:  168
	float      FalloffFactor;                 // offset:  172
	uint       AssignmentGroup;               // offset:  176
	float      MipBias;                       // offset:  180
};

// Fusion.Engine.Graphics.SceneRenderer+LIGHTPROBE
// Marshal.SizeOf = 96
struct LIGHTPROBE {
	float4x4   MatrixInv;                     // offset:    0
	float4     Position;                      // offset:   64
	uint       ImageIndex;                    // offset:   80
	float      NormalizedWidth;               // offset:   84
	float      NormalizedHeight;              // offset:   88
	float      NormalizedDepth;               // offset:   92
};

// ---------------- SHADER RESOURCES ---------------- //

cbuffer __buffer0 : register(b0) {
	CAMERA Camera : packoffset(c0);
};
cbuffer __buffer1 : register(b1) {
	DIRECT_LIGHT DirectLight : packoffset(c0);
};
cbuffer __buffer2 : register(b2) {
	STAGE Stage : packoffset(c0);
};
cbuffer __buffer3 : register(b3) {
	INSTANCE Instance : packoffset(c0);
};
cbuffer __buffer4 : register(b4) {
	SUBSET Subset : packoffset(c0);
};
cbuffer __buffer5 : register(b5) {
	float4x4 Bones[128] : packoffset(c0);
};
cbuffer __buffer6 : register(b6) {
	CASCADE_SHADOW CascadeShadow : packoffset(c0);
};
Texture2D<float4>              Texture0                       : register(t0);
Texture2D<float4>              Texture1                       : register(t1);
Texture2D<float4>              Texture2                       : register(t2);
Texture2D<float4>              Texture3                       : register(t3);
Texture2D<float4>              MipIndex                       : register(t4);
Texture3D<uint2>               ClusterArray                   : register(t5);
Buffer<uint>                   ClusterIndexBuffer             : register(t6);
StructuredBuffer<LIGHT>        ClusterLightBuffer             : register(t7);
StructuredBuffer<DECAL>        ClusterDecalBuffer             : register(t8);
StructuredBuffer<LIGHTPROBE>   ClusterLightProbeBuffer        : register(t9);
Texture2D<float4>              DecalImages                    : register(t10);
Texture2D<float4>              ShadowMap                      : register(t11);
Texture2D<float4>              ShadowMapParticles             : register(t12);
Texture2D<float4>              AmbientOcclusion               : register(t13);
Texture2D<float4>              IrradianceMapR                 : register(t14);
Texture2D<float4>              IrradianceMapG                 : register(t15);
Texture2D<float4>              IrradianceMapB                 : register(t16);
Texture3D<float4>              IrradianceVolumeR              : register(t17);
Texture3D<float4>              IrradianceVolumeG              : register(t18);
Texture3D<float4>              IrradianceVolumeB              : register(t19);
TextureCubeArray<float4>       RadianceCache                  : register(t20);
Texture2D<float4>              EnvLut                         : register(t21);
SamplerState                   SamplerLinear                  : register(s0);
SamplerState                   SamplerPoint                   : register(s1);
SamplerState                   SamplerLightmap                : register(s2);
SamplerState                   DecalSampler                   : register(s3);
SamplerState                   ParticleSampler                : register(s4);
SamplerState                   MipSampler                     : register(s5);
SamplerState                   SamplerLinearClamp             : register(s6);
SamplerComparisonState         ShadowSampler                  : register(s7);
