#ifndef __HAMMERSLEY_FXI__
#define __HAMMERSLEY_FXI__

float radicalInverse_VdC(uint bits)
{
    bits = (bits << 16u) | (bits >> 16u);
    bits = ((bits & 0x55555555u) << 1u) | ((bits & 0xAAAAAAAAu) >> 1u);
    bits = ((bits & 0x33333333u) << 2u) | ((bits & 0xCCCCCCCCu) >> 2u);
    bits = ((bits & 0x0F0F0F0Fu) << 4u) | ((bits & 0xF0F0F0F0u) >> 4u);
    bits = ((bits & 0x00FF00FFu) << 8u) | ((bits & 0xFF00FF00u) >> 8u);
    return float(bits) * 2.3283064365386963e-10f;
}


float2 hammersley2d(uint i, uint N)
{
    return float2(float(i) / float(N), radicalInverse_VdC(i));
}


float3 hammersley_sphere_uniform(float u, float v) 
{
	float phi = v * 2.0f * 3.141592f;
	float cosTheta = 1.0f - 2*u;
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
	return float3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);
}


float3 internal_hammersley_sphere_uniform(float u, float v) 
{
	float phi = v * 2.0f * 3.141592f;
	float cosTheta = 1.0f - 2*u;
	float sinTheta = sqrt(1.0f - cosTheta * cosTheta);
	return float3(cos(phi) * sinTheta, cosTheta, sin(phi) * sinTheta);
}


float3 hammersley_sphere_uniform(int i, int n) 
{
	float2 xy = hammersley2d(i, n);
	return internal_hammersley_sphere_uniform( xy.x, xy.y );
}

#endif