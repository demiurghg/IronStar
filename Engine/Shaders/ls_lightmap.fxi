#ifndef __LS_LIGHTMAP_FXI__
#define __LS_LIGHTMAP_FXI__

#include "shl1.fxi"

struct LIGHTMAP_RESOURCES
{
	SamplerState		Sampler;
	Texture2D<float4>	IrradianceMapL0;
	Texture2D<float4>	IrradianceMapL1;
	Texture2D<float4>	IrradianceMapL2;
	Texture2D<float4>	IrradianceMapL3;
	Texture3D<float4>	IrradianceVolumeR;
	Texture3D<float4>	IrradianceVolumeG;
	Texture3D<float4>	IrradianceVolumeB;
};

static const float GI_SCALE = 3.1415f;

float3	EvaluateLightmap ( LIGHTMAP_RESOURCES lightmap, SURFACE surface, float2 lightMapCoord )
{
	float3	normal	=	normalize(surface.normal);
	
	float3 	shL0	=	lightmap.IrradianceMapL0.Sample( lightmap.Sampler, lightMapCoord ).rgb;
	float3 	shL1	=	lightmap.IrradianceMapL1.Sample( lightmap.Sampler, lightMapCoord ).rgb * 2 - 1;
	float3 	shL2	=	lightmap.IrradianceMapL2.Sample( lightmap.Sampler, lightMapCoord ).rgb * 2 - 1;
	float3 	shL3	=	lightmap.IrradianceMapL3.Sample( lightmap.Sampler, lightMapCoord ).rgb * 2 - 1;
	
	shL1	*=	shL0;
	shL2	*=	shL0;
	shL3	*=	shL0;
	
	float4	irrR	=	float4( shL0.r, shL1.r, shL2.r, shL3.r );
	float4	irrG	=	float4( shL0.g, shL1.g, shL2.g, shL3.g );
	float4	irrB	=	float4( shL0.b, shL1.b, shL2.b, shL3.b );
	
	float	lightR	=	EvalSHL1Smooth( irrR, normal );
	float	lightG	=	EvalSHL1Smooth( irrG, normal );
	float	lightB	=	EvalSHL1Smooth( irrB, normal );
	return	float3( lightR, lightG, lightB ) * surface.diffuse * GI_SCALE;
}


float3	EvaluateLightVolume ( LIGHTMAP_RESOURCES lightmap, SURFACE surface, float3 volumeCoord )
{
	float3	worldNormal	=	normalize(surface.normal);
	float4 	irradianceR	=	lightmap.IrradianceVolumeR.Sample( lightmap.Sampler, volumeCoord );
	float4 	irradianceG	=	lightmap.IrradianceVolumeG.Sample( lightmap.Sampler, volumeCoord );
	float4 	irradianceB	=	lightmap.IrradianceVolumeB.Sample( lightmap.Sampler, volumeCoord );
	float	lightR		=	EvalSHL1Smooth( irradianceR, worldNormal );
	float	lightG		=	EvalSHL1Smooth( irradianceG, worldNormal );
	float	lightB		=	EvalSHL1Smooth( irradianceB, worldNormal );
	return	float3( lightR, lightG, lightB ) * surface.diffuse * GI_SCALE;
}


float3	EvaluateLightVolume ( LIGHTMAP_RESOURCES lightmap, float3 normal, float3 volumeCoord )
{
	float3	worldNormal	=	normalize(normal);
	float4 	irradianceR	=	lightmap.IrradianceVolumeR.Sample( lightmap.Sampler, volumeCoord );
	float4 	irradianceG	=	lightmap.IrradianceVolumeG.Sample( lightmap.Sampler, volumeCoord );
	float4 	irradianceB	=	lightmap.IrradianceVolumeB.Sample( lightmap.Sampler, volumeCoord );
	float	lightR		=	EvalSHL1Smooth( irradianceR, worldNormal );
	float	lightG		=	EvalSHL1Smooth( irradianceG, worldNormal );
	float	lightB		=	EvalSHL1Smooth( irradianceB, worldNormal );
	return	float3( lightR, lightG, lightB ) * GI_SCALE;
}



#endif