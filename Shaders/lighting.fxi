
/*
	.......
*/

struct SURFACE {
	
}



StructuredBuffer<DECAL>	sbufferDecalData;
Texture2D				textureShadowAtlas;
Texture2D				textureShadowAtlas;
SamplerState			samplerShadow;
SamplerState			samplerLinear;

StructuredBuffer<DECAL>	gDecalData;
Texture2D				gTextureShadowAtlas;
Texture2D				gTextureShadowAtlas;
SamplerState			gSamplerShadow;
SamplerState			gSamplerLinear;

cbuffer 				CBStage 			: 	register(b0) { STAGE    	cbStage     	: packoffset( c0 ); }	


float3 ComputeCascadedShadows ( 
	float2 	screenPosition,
	float3 	worldPosition, 
	float3 	triangleNormal,
	float4x4 cascadeViewProjection[4],
	float4x4 cascadeGradientMatrix[4],
	float4	 cascadeScaleOffset[4],
	SamplerComparisonState shadowSampler, 
	SamplerState linearSampler, 
	Texture2D solidShadowMap, 
	Texture2D maskShadowMap
)
{
	return float3(1,0,1);
}
	
	
	
float3 ComputeClusteredLighting (
	float2 	screenPosition,
	float3 	worldPosition,
	float4	projectionPosition,
	float3 	surfaceNormal,
	float3 	surfaceBaseColor,
	float	surfaceRoughness,
	float	surfaceMetallic,
	Texture3D<uint2> clusterTable
	StructuredBuffer<DECAL>	decalDataTable,
	StructuredBuffer<LIGHT>	lightDataTable,
	SamplerComparisonState shadowSampler, 
	SamplerState linearSampler, 
	Texture2D solidShadowMap, 
	Texture2D maskShadowMap
)
{
	return float3(1,0,1);
}