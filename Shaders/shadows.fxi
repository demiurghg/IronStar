
static float2 poisonDisk[16] = {
	float2( 0.6471434f,  0.5442180f),
	float2( 0.6627925f, -0.0145980f),
	float2( 0.2094653f,  0.6861125f),
	float2( 0.01836824f, 0.1938052f),
	float2(-0.5083427f, -0.0543112f),
	float2(-0.1876637f, -0.4905864f),
	float2( 0.2701841f, -0.1667389f),
	float2(-0.5884321f,  0.5500614f),
	
	float2( 0.5244192f, -0.7732284f),
	float2( 0.1206752f, -0.9527515f),
	float2(-0.2352096f,  0.9127740f),
	float2(-0.9525819f,  0.2960428f),
	float2( 0.8872142f, -0.4135098f),
	float2(-0.9452454f, -0.1600218f),
	float2(-0.6495278f, -0.4626486f),
	float2(-0.4085272f, -0.8579809f)
};


float ProjectShadow ( float3 worldPos, float4x4 viewProjection, out float4 projection )
{	
	float4 temp = 	mul( float4(worldPos,1), viewProjection );
	temp.xy 	/= 	temp.w;
	temp.w   	= 	1;
	
	projection	=	temp;

	return max(abs(temp.x), abs(temp.y));
}


float3	ComputeCSM ( 
	float3 worldPos, 
	STAGE stage, 
	SamplerComparisonState shadowSampler, 
	SamplerState linearSampler, 
	Texture2D csmTexture, 
	Texture2D particleShadow, 
	bool useFilter )
{
	float4	projection;
	float4	bestProjection;
	float4	bestScaleOffset;

	//	select cascade :
	if ( ProjectShadow( worldPos, stage.CascadeViewProjection3, projection ) < 0.99 ) {
		bestProjection 	= projection;
		bestScaleOffset	= stage.CascadeScaleOffset3;
	}
	
	if ( ProjectShadow( worldPos, stage.CascadeViewProjection2, projection ) < 0.99 ) {
		bestProjection 	= projection;
		bestScaleOffset	= stage.CascadeScaleOffset2;
	}
	
	if ( ProjectShadow( worldPos, stage.CascadeViewProjection1, projection ) < 0.99 ) {
		bestProjection 	= projection;
		bestScaleOffset	= stage.CascadeScaleOffset1;
	}
	
	if ( ProjectShadow( worldPos, stage.CascadeViewProjection0, projection ) < 0.99 ) {
		bestProjection 	= projection;
		bestScaleOffset	= stage.CascadeScaleOffset0;
	}

	//	compute UVs 
	float2	csmSize;
	float2	csmSizeRcp;
	csmTexture.GetDimensions( csmSize.x, csmSize.y );
	
	csmSizeRcp.xy	=	1 / csmSize.xy;

	float2	uv		=	mad( projection.xy, bestScaleOffset.xy, bestScaleOffset.zw );
	float   z  		= 	projection.z;
	float3	shadow	=	0;
	
	// Poisson disk radius for 16 taps.
	float radius = 2.257f; 
	
	if (useFilter) {
		for (int i=0; i<16; i++) {
			float  x   = poisonDisk[i].x;
			float  y   = poisonDisk[i].y;
			float  sh  = csmTexture.SampleCmpLevelZero( shadowSampler, uv + csmSizeRcp * radius * float2(x,y), z );
			shadow += sh / 16;
		}

		shadow *= particleShadow.SampleLevel( linearSampler, uv, 0 ).rgb;
		
	} else {
		shadow = csmTexture.SampleCmpLevelZero( shadowSampler, uv, z );
	}
	
	return shadow;
}

