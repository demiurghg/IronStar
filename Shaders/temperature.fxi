
//
//	http://www.tannerhelland.com/4435/convert-temperature-rgb-algorithm-code/
//	Given a temperature (in Kelvin), estimate an RGB equivalent
//
float3 getRGBfromTemperature(float tmpKelvin)
{
	float r,g,b;

    float tmpCalc;

    // Temperature must fall between 1000 and 40000 degrees
    if (tmpKelvin < 1000 ) { tmpKelvin = 1000; }
    if (tmpKelvin > 40000 ) { tmpKelvin = 40000; }
    
    // All calculations require tmpKelvin \ 100, so only do the conversion once
    tmpKelvin = tmpKelvin / 100;
    
    // Calculate each color in turn
    
    // First: red
    if (tmpKelvin <= 66 ) {
        r = 255;
    } else {
        // Note: the R-squared value for this approximation is .988
        tmpCalc = tmpKelvin - 60;
        tmpCalc = 329.698727446 * pow(tmpCalc, -0.1332047592);
        r = tmpCalc;
        if (r < 0 ) { r = 0; }
        if (r > 255 ) { r = 255; }
    }
    
    // Second: green
    if (tmpKelvin <= 66 ) {
        // Note: the R-squared value for this approximation is .996
        tmpCalc = tmpKelvin;
        tmpCalc = 99.4708025861 * log(tmpCalc) - 161.1195681661;
        g = tmpCalc;
        if (g < 0 ) { g = 0; }
        if (g > 255 ) { g = 255; }
    } else {
        // Note: the R-squared value for this approximation is .987
        tmpCalc = tmpKelvin - 60;
        tmpCalc = 288.1221695283 * pow(tmpCalc, -0.0755148492);
        g = tmpCalc;
        if (g < 0 ) { g = 0; }
        if (g > 255 ) { g = 255; }
    }
    
    // Third: blue
    if (tmpKelvin >= 66 ) {
        b = 255;
    } else if (tmpKelvin <= 19 ) {
        b = 0;
    } else {
        // Note: the R-squared value for this approximation is .998
        tmpCalc = tmpKelvin - 10;
        tmpCalc = 138.5177312231 * log(tmpCalc) - 305.0447927307;
        
        b = tmpCalc;
        if (b < 0 ) { b = 0; }
        if (b > 255 ) { b = 255; }
    }
    
	return float3(r,g,b)/255.0f;
}